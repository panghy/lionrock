plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2020.0.3")
    set('wavefrontVersion', "2.2.0")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    tests
    plain
}

bootJar {
    classifier = 'boot'
}

dependencies {
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.zipkin.brave:brave-instrumentation-grpc'

    implementation 'com.wavefront:wavefront-spring-boot-starter'

    implementation ('io.github.lognet:grpc-spring-boot-starter:4.5.9')

    implementation project(':lionrock-proto-java')
    implementation 'org.foundationdb:fdb-java:6.3.22'

    testImplementation project(':lionrock-foundationdb-client')
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "com.wavefront:wavefront-spring-boot-bom:${wavefrontVersion}"
    }
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishing {
    publications {
        bootJava(MavenPublication) {
            from components.java
            artifact bootJar
            pom {
                name = "lionrock-foundationdb-server"
                description = "FoundationDB gRPC Server"
                url = "https://github.com/panghy/lionrock"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "panghy"
                        name = "Clement Pang"
                    }
                }
                scm {
                    url = "https://github.com/panghy/lionrock"
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if(project.version.endsWith('-SNAPSHOT')) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.bootJava
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveBaseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

artifacts {
    tests testJar
    plain jar
}
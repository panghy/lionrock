buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
}

bootJar {
    enabled = false
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation project(':lionrock-proto-java')
    implementation 'org.foundationdb:fdb-java'
    implementation 'io.grpc:grpc-stub'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: "3.21.4"

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '4.6.1'
    testImplementation 'net.bytebuddy:byte-buddy:1.12.13'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.6.1'

    testImplementation(testFixtures(project(":lionrock-grpc-tests")))
    testImplementation project(path: ':lionrock-foundationdb-server', configuration: 'plain')
    testImplementation project(path: ':lionrock-foundationdb-server', configuration: 'tests')

    // replace after refactoring.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.springframework.cloud:spring-cloud-starter-sleuth'
    testRuntimeOnly('io.github.lognet:grpc-spring-boot-starter:4.8.0')

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "lionrock-foundationdb-client"
                description = "FoundationDB gRPC Client Library"
                url = "https://github.com/panghy/lionrock"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "panghy"
                        name = "Clement Pang"
                    }
                }
                scm {
                    url = "https://github.com/panghy/lionrock"
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if(project.version.endsWith('-SNAPSHOT')) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}
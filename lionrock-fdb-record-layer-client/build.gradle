plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'signing'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id "com.google.protobuf" version "0.8.19"
}

repositories {
    mavenCentral()
    maven {
        url "https://ossartifacts.jfrog.io/artifactory/fdb-record-layer/"
    }
}

bootJar {
    enabled = false
}

dependencies {
    implementation project(':lionrock-foundationdb-client')
    implementation project(':lionrock-proto-java')
    implementation 'org.foundationdb:fdb-record-layer-core-pb3:3.1.256.0'
    implementation 'com.google.protobuf:protobuf-java:3.21.1'
    implementation 'org.foundationdb:fdb-java:6.3.24'
    implementation 'io.grpc:grpc-stub:1.48.0'

    testImplementation project(path: ':lionrock-foundationdb-server', configuration: 'plain')
    testImplementation project(path: ':lionrock-foundationdb-server', configuration: 'tests')
    testImplementation(testFixtures(project(":lionrock-grpc-tests")))

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.springframework.cloud:spring-cloud-starter-sleuth'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allJava
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "lionrock-foundationdb-client"
                description = "FoundationDB gRPC Record Layer Library"
                url = "https://github.com/panghy/lionrock"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "panghy"
                        name = "Clement Pang"
                    }
                }
                scm {
                    url = "https://github.com/panghy/lionrock"
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if (project.version.endsWith('-SNAPSHOT')) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.1'
    }
}
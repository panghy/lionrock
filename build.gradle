plugins {
    id 'java'
    id 'jacoco'
    id 'net.researchgate.release' version '3.0.0'
}

allprojects {
    group = 'io.github.panghy.lionrock'

    repositories {
        mavenCentral()
    }

    ext {
        set('springCloudVersion', "2021.0.3")
        set('wavefrontVersion', "2.2.2")
        set('grpcVersion', "1.46.0")
    }
}

subprojects {
    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }
}

subprojects {
    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if ("io.grpc".equalsIgnoreCase(details.requested.group)) {
                details.useVersion "${grpcVersion}"
            }
            if ("com.google.guava".equalsIgnoreCase(details.requested.group) &&
                    "guava".equalsIgnoreCase(details.requested.name)) {
                details.useVersion "31.1-jre"
            }
            if ("org.foundationdb".equalsIgnoreCase(details.requested.group) &&
                    "fdb-java".equalsIgnoreCase(details.requested.name)) {
                details.useVersion "6.3.24"
            }
            if ("com.google.protobuf".equalsIgnoreCase(details.requested.group)) {
                details.useVersion "3.20.1"
            }
        }
    }
}

release {
    tagTemplate = 'v${version}'
    git {
        requireBranch = 'master'
    }
}

// tag::coverageTask[]
// task to gather code coverage from multiple subprojects
// NOTE: the `JacocoReport` tasks do *not* depend on the `test` task by default. Meaning you have to ensure
// that `test` (or other tasks generating code coverage) run before generating the report.
// You can achieve this by calling the `test` lifecycle task manually
// $ ./gradlew test codeCoverageReport
tasks.register("codeCoverageReport", JacocoReport) {
    // If a subproject applies the 'jacoco' plugin, add the result it to the report
    subprojects { subproject ->
        subproject.plugins.withType(JacocoPlugin).configureEach {
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).configureEach { testTask ->
                sourceSets subproject.sourceSets.main
                executionData(testTask)
            }

            // To automatically run `test` every time `./gradlew codeCoverageReport` is called,
            // you may want to set up a task dependency between them as shown below.
            // Note that this requires the `test` tasks to be resolved eagerly (see `forEach`) which
            // may have a negative effect on the configuration time of your build.
            subproject.tasks.matching({ t -> t.extensions.findByType(JacocoTaskExtension) }).forEach {
                rootProject.tasks.codeCoverageReport.dependsOn(it)
            }
        }
    }

    // enable the different report types (html, xml, csv)
    reports {
        xml.enabled true
        csv.enabled true
        html.enabled true
    }
}
// end::coverageTask[]

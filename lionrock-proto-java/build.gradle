buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.17'
    }
}

plugins {
    id "com.google.protobuf" version "0.8.17"
    id 'java'
    id 'maven-publish'
    id 'signing'
}

java {
    withJavadocJar()
    withSourcesJar()
}

sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.0'

    implementation 'com.google.protobuf:protobuf-java:3.18.0'
    protobuf 'com.google.protobuf:protobuf-java:3.18.0'

    implementation 'io.grpc:grpc-protobuf:1.40.1'
    implementation 'io.grpc:grpc-stub:1.40.1'
    compileOnly 'org.apache.tomcat:annotations-api:6.0.53' // necessary for Java 9+
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        proto {
            srcDir "../proto"
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.18.0'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.40.1'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

apply plugin: 'idea'

clean {
    delete protobuf.generatedFilesBaseDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "lionrock-proto-java"
                description = "Lionrock Java Proto Library"
                url = "https://github.com/panghy/lionrock"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "panghy"
                        name = "Clement Pang"
                    }
                }
                scm {
                    url = "https://github.com/panghy/lionrock"
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            if(project.version.endsWith('-SNAPSHOT')) {
                url "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            } else {
                url "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            }
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}
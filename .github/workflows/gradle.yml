# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Gradle Build

on:
  push:
    branches: [ master ]
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.2.0
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew --init-script .github/init.gradle build -x test --no-daemon
        env:
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}

      - uses: actions/upload-artifact@v2
        with:
          name: lionrock-foundationdb-server
          path: 'lionrock-foundationdb-server/build/libs/lionrock-foundationdb-server-*.jar'

      - uses: actions/upload-artifact@v2
        with:
          name: lionrock-cli
          path: 'lionrock-cli/build/libs'

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: download fdb-client
        run: wget https://github.com/apple/foundationdb/releases/download/6.3.23/foundationdb-clients_6.3.23-1_amd64.deb

      - name: download fdb-server
        run: wget https://github.com/apple/foundationdb/releases/download/6.3.23/foundationdb-server_6.3.23-1_amd64.deb

      - name: install fdb-client
        run: sudo dpkg -i foundationdb-clients_6.3.23-1_amd64.deb

      - name: install fdb-server
        run: sudo dpkg -i foundationdb-server_6.3.23-1_amd64.deb

      - name: remove fdb-client
        run: rm foundationdb-clients_6.3.23-1_amd64.deb

      - name: remove fdb-server
        run: rm foundationdb-server_6.3.23-1_amd64.deb

      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.2.0

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Test with Gradle
        run: ./gradlew --init-script .github/init.gradle test codeCoverageReport --no-daemon --info
        env:
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}

      - name: Generate JaCoCo Badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.6.1
        with:
          generate-branches-badge: true
          jacoco-csv-file: build/reports/jacoco/codeCoverageReport/codeCoverageReport.csv

      - name: Log coverage percentage
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

      - name: Add new badge
        uses: EndBug/add-and-commit@v9
        continue-on-error: true
        with:
          default_author: github_actions
          message: 'upload badge'
          add: '*.svg'

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  publish:
    runs-on: ubuntu-latest
    needs: test
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v3
      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.2.0
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - id: install-secret-key
        name: Install gpg secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Publish
        run: ./gradlew --init-script .github/init.gradle publish --no-daemon -Psigning.gnupg.passphrase=${{ secrets.OSSRH_GPG_SECRET_KEY_PASSWORD }} -Psigning.gnupg.executable=gpg -Psigning.gnupg.keyName=${{ secrets.OSSRH_GPG_SECRET_NAME }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.OSSRH_TOKEN }}
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  # This job builds and uploads CLI binaries
  cli-native-binaries:
    name: build and upload CLI
    needs: test
    strategy:
      matrix:
        os: [ macos, ubuntu ]
    runs-on: ${{ matrix.os }}-latest

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - uses: ayltai/setup-graalvm@v1
        with:
          java-version: 11
          graalvm-version: 21.2.0
          native-image: true

      # (Optional) Install native-image
      - name: install native-image
        run: gu install native-image

      - name: cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: gradle-${{ matrix.os }}-${{ hashFiles('build.gradle') }}-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ matrix.os }}-

      # Builds native image
      - name: "build for ${{ matrix.os }}"
        run: ./gradlew --init-script .github/init.gradle nativeImage --no-daemon
        env:
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}
          RUNNING_OS: ${{ matrix.os }}
          PROJECT_VERSION: ${{ steps.config.outputs.projectVersion }}

      # Uploads binary
      - name: upload ${{ matrix.os }} image
        uses: actions/upload-artifact@v2
        with:
          name: lionrock-cli-${{ matrix.os }}
          path: lionrock-cli/build/bin/lionrock-cli

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f ~/.gradle/caches/modules-2/modules-2.lock
          rm -f ~/.gradle/caches/modules-2/gc.properties

  docker:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew --init-script .github/init.gradle :lionrock-foundationdb-server:build -x test --no-daemon
        env:
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: clementpang/lionrock-foundationdb-server
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: lionrock-foundationdb-server/
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  docker-self-contained:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew --init-script .github/init.gradle :lionrock-foundationdb-server:build -x test --no-daemon
        env:
          BUILD_CACHE_ADDR: ${{ secrets.BUILD_CACHE_ADDR }}
          BUILD_CACHE_USERNAME: ${{ secrets.BUILD_CACHE_USERNAME }}
          BUILD_CACHE_PASSWORD: ${{ secrets.BUILD_CACHE_PASSWORD }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: clementpang/lionrock-test-server
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: lionrock-foundationdb-server/
          file: lionrock-foundationdb-server/self_contained.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}